Java Map Interface
==================
A map contains values on the basis of key, i.e. key and value pair. Each key and value pair is known as an entry. A Map contains unique keys.

A Map is useful if you have to search, update or delete elements on the basis of a key.

Java Map Hierarchy
There are two interfaces for implementing Map in java: Map and SortedMap, and three classes: HashMap, LinkedHashMap, and TreeMap.
 The hierarchy of Java Map is given below:

Java Map Hierarchy
A Map doesn't allow duplicate keys, but you can have duplicate values. HashMap and LinkedHashMap allow null keys and values, but 
TreeMap doesn't allow any null key or value.



A Map can't be traversed, so you need to convert it into Set using keySet() or entrySet() method

Java HashMap
============
Java HashMap class hierarchy
Java HashMap class implements the Map interface which allows us to store key and value pair, where keys should be unique.
 If you try to insert the duplicate key, it will replace the element of the corresponding key. It is easy to perform operations using 
the key index like updation, deletion, etc. HashMap class is found in the java.util package.

HashMap in Java is like the legacy Hashtable class, but it is not synchronized. It allows us to store the null elements as well,
 but there should be only one null key. Since Java 5, it is denoted as HashMap<K,V>, where K stands for key and V for value. 
It inherits the AbstractMap class and implements the Map interface.

Points to remember
Java HashMap contains values based on the key.
Java HashMap contains only unique keys.
Java HashMap may have one null key and multiple null values.
Java HashMap is non synchronized.
Java HashMap maintains no order.
The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.
Hierarchy of HashMap class
As shown in the above figure, HashMap class extends AbstractMap class and implements Map interface.

HashMap class declaration
Let's see the declaration for java.util.HashMap class.


public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Cloneable, Serializable


Java LinkedHashMap class
Java LinkedHashMap class hierarchy
Java LinkedHashMap class is Hashtable and Linked list implementation of the Map interface, with predictable iteration order. 
It inherits HashMap class and implements the Map interface.

Points to remember
Java LinkedHashMap contains values based on the key.
Java LinkedHashMap contains unique elements.
Java LinkedHashMap may have one null key and multiple null values.
Java LinkedHashMap is non synchronized.
Java LinkedHashMap maintains insertion order.
The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.
LinkedHashMap class declaration
Let's see the declaration for java.util.LinkedHashMap class.

Java TreeMap class
Java TreeMap class hierarchy
Java TreeMap class is a red-black tree based implementation. It provides an efficient means of storing key-value pairs in sorted order.

The important points about Java TreeMap class are:

Java TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.
Java TreeMap contains only unique elements.
Java TreeMap cannot have a null key but can have multiple null values.
Java TreeMap is non synchronized.
Java TreeMap maintains ascending order.
TreeMap class declaration
Let's see the declaration for java.util.TreeMap class.

public class TreeMap<K,V> extends AbstractMap<K,V> implements NavigableMap<K,V>, Cloneable, Serializable  








